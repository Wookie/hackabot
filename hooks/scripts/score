#!/usr/bin/env python

"""
This is the hook for tracking ++/-- scores
"""

from datetime import datetime
import re
import sys

# import hackabot utility classes
from hook import Hook
from models import ScoreEntry

class Score(Hook):

    def __init__(self):

        # call the base constructor to set up everything
        super(Score, self).__init__('score')

    def main(self):

        delta = 0
        name = None

        if re.match(r'\s+!.*', self._msg):
            # we don't care about ! commands
            return None

        if re.match(r'^\s*(\S+)\+\+\s*$', self._msg):
            c = re.match(r'^\s*(\S+)\+\+\s*$', self._msg)
            name = c.group(1)
            delta = 1

        if re.match(r'^\s*(\S+)\-\-\s*$', self._msg):
            c = re.match(r'^\s*(\S+)\-\-\s*$', self._msg)
            name = c.group(1)
            delta = -1

        # if it wasn't a ++/-- message, then we don't adjust any scores
        if name is None:
            return None

        try:
            # get the connection
            store = self._get_database_connection()

            # s will be None if none are found
            s = store.find(ScoreEntry, ScoreEntry.name == unicode(name)).one()

            if s is None:
                # create a new score entry
                s = ScoreEntry(name, delta, self._nick, self._to)
                store.add(s)
            else:
                # update the score entry we found
                s.nick = unicode(self._nick)
                s.value += delta
                s.date = datetime.now()
                
            # flush and commit
            store.flush()
            store.commit()
            
            self._log.debug('Score updated successfully...(nick: %s score: %d)' % (s.name, s.value))
       
        except Exception, err:
            self._log.warn('Score hook: %s' % err)

        return None

if __name__ == "__main__":
    hook = Score()
    sys.exit(hook.main())
