#!/usr/bin/env python

##HACKABOT_HELP##
# Apply a find/replace regex to a message (last 50 lines only)
# !s/find/replace/[gi]         (g will match other people too)
##HACKABOT_HELP##

import datetime
import os
import random
import re
import sys

from storm.expr import Asc,Desc,And,Or,Not

from command import Command
from models import LogEntry

class S(Command):

    def __init__(self):

        # call the base constructor to set up everything
        super(S, self).__init__('s')

    def _replace(self, find, replace, option):

        # get the connection
        store = self._get_database_connection()

        if option == 'g':
            entries = store.find(LogEntry, And( LogEntry.chan == unicode(self._to),
                                                Or( LogEntry.type == u'msg',
                                                    LogEntry.type == u'action'),
                                                Not(LogEntry.text.like(u'!s/%')),
                                                Not(LogEntry.text.like(u'!s %'))))
        else:
            entries = store.find(LogEntry, And( LogEntry.nick == unicode(self._nick),
                                                LogEntry.chan == unicode(self._to),
                                                Or( LogEntry.type == u'msg',
                                                    LogEntry.type == u'action'),
                                                Not(LogEntry.text.like(u'!s/%')),
                                                Not(LogEntry.text.like(u'!s %'))))
        entry = entries.order_by(Desc(LogEntry.id))[0]

        if entry.text.find(find) != -1:
            out = entry.text.replace(find, replace)
            if entry.type == 'msg':
                print >> sys.stdout, 'send %s actually meant: %s' % (self._nick, out)
            elif entry.type == 'action':
                print >> sys.stdout, 'correction: * %s %s' % (self._nick, out)
            else:
                print >> sys.stdout, 'ERROR: unknown type: %s' % entry.type
        else:
            print >> sys.stdout, 'send %s: Sorry, I can\'t match the expression "%s"' % (self._nick, find)

    def main(self):

        # get where they are checking
        if re.match(r'^\s*\/([^\\]?[^\/]*)\/([^\\]?[^\/]*)\/([ig]*)$', self._msg):
            c = re.match(r'^\s*\/([^\\]?[^\/]*)\/([^\\]?[^\/]*)\/([ig]*)$', self._msg)
            find = c.group(1)
            replace = c.group(2)
            option = c.group(3)
        else:
            print >> sys.stdout, 'send missing parameter'
            self._print_help(os.path.realpath(__file__))
            return 1

        self._replace(find, replace, option)

        return None

if __name__ == "__main__":
    cmd = S()
    sys.exit(cmd.main())
