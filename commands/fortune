#!/usr/bin/env python

##HACKABOT_HELP##
# Random stuff
# !fortune [#chan] [something or list]
##HACKABOT_HELP##

import os
import random
import re
import sys

from command import Command
from control import ChannelNames

class Fortune(Command):
    """
    Outputs a fortune from the various databases.
    """

    def __init__(self):

        # call the base constructor to set up everything
        super(Fortune, self).__init__('fortune')

    def _get_fortune_files(self):
        files = []
        dir = os.path.join(os.getenv('HACKABOT_DIR'), 'misc', 'cookies')
        names = os.listdir(dir)
        for name in names:
            if os.path.isfile(os.path.join(dir, name)):
                if name.find('.') == -1:
                    files.append(name)

        return files

    def _load_fortunes_file(self, f):
        fin = open(os.path.join(os.getenv('HACKABOT_DIR'), 'misc', 'cookies', f), 'r')
        
        # load the fortunes
        fortunes = []
        fortune = []
        for l in fin.readlines():
            if l.startswith('%') and len(fortune):
                fortunes.append(fortune)
                fortune = []
                continue

            fortune.append(l.strip())

        fin.close()

        return fortunes

    def _show_fortune(self, f):
        files = self._get_fortune_files()
        if f == 'fortune':
            print >> sys.stdout, 'From %s:' % f
            f = files[random.randrange(0, len(files))]

        if f not in files:
            print >> sys.stdout, 'Unknown fortune database'
            return

        fortunes = self._load_fortunes_file(f)
        fortune = fortunes[random.randrange(0, len(fortunes))]

        print >> sys.stdout, ' '.join(fortune)

    def _show_fortune_list(self):
        files = self._get_fortune_files()
        files = sorted(files)
        print >> sys.stdout, ' '.join(files)

    def _nick_allowed(self, chan):

        # get the list of names from the specified channel
        cn = ChannelNames(chan)

        # check if the name is in the channel
        return (self._nick in cn)

    def main(self):
        chan = None
        f = os.path.basename(__file__)
        if re.match(r'^(#\S+)\s+(.+)$', self._msg):
            c = re.match(r'^(#\S+)\s+(.+)$', self._msg)
            chan = c.group(1)
            f = c.group(2)
        elif re.match(r'^(.+)$', self._msg):
            c = re.match(r'^(.+)$', self._msg)
            f = c.group(1)

        if chan:
            if self._nick_allowed(chan):
                print >> sys.stdout, 'to %s' % chan
            else:
                print >> sys.stdout, 'send You are not in that channel, so I won\'t talk for you in there.'
                return None

        print >> sys.stdout, "sendnext"

        if f == "list":
            self._show_fortune_list()
        else:
            self._show_fortune(f)

        return None


if __name__ == "__main__":
    cmd = Fortune()
    sys.exit(cmd.main())
