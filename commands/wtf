#!/usr/bin/env python

##HACKABOT_HELP##
# Get a random or specific acronym!
# !wtf [something] | --add <acronym> <what it stands for>
##HACKABOT_HELP##

import os
import re
import sqlite3
import sys

from command import Command

class Wtf(Command):
    """
    An example command using new command writing tools.
    """

    Q = { 
        'mysql': { 
            'random' : 'SELECT id,acronym,text,lastused FROM wtf ORDER BY RAND()*(1/lastused) DESC LIMIT 1',
            'lookup' : 'SELECT id,acronym_i,acronym,text,lastused FROM wtf WHERE acronym_i = %s',
            },
        'sqlite': { 
            'random' : 'SELECT id,acronym,text,lastused FROM wtf ORDER BY RANDOM()*(1/lastused) DESC LIMIT 1',
            'lookup' : 'SELECT id,acronym_i,acronym,text,lastused FROM wtf WHERE acronym_i = ?',
            'add' : 'INSERT INTO wtf (acronym_i, acronym, text, nick, chan, date) VALUES (?,?,?,?,?,date("now"))',
            'touch' : "UPDATE wtf SET ('lastused') VALUES (?) WHERE id = ?"
            }
        }


    def __init__(self):

        # call the base constructor to set up everything
        super(Wtf, self).__init__('wtf')

    def _return_random(self):
        # get the connection
        conn = self._get_database_connection()
        conn.row_factory = sqlite3.Row

        # start a cursor
        c = conn.cursor()

        # execute the random query
        c.execute(Wtf.Q[self._db.lower()]['random'])

        # get the row
        row = c.fetchone()

        # TODO: update the last used

        # clean up
        c.close()
        conn.close()

        # return the row
        if row != None:
            print >> sys.stdout, 'send %s: Your random acronym is: %s == %s' % (self._nick, row['acronym'], row['text'])
        else:
            print >> sys.stdout, 'send %s: Sorry, there are no registered acronyms, try adding some...'

    def _add_acronym(self, acronym, definition):

        try:
            # get the connection
            conn = self._get_database_connection()
            conn.row_factory = sqlite3.Row

            # start a cursor
            c = conn.cursor()

            # run the query
            chan = ''
            if self._event_type.lower() == 'pubmsg':
                chan = self._to
            params = (acronym.lower(), acronym.upper(), definition, self._nick, chan)
            c.execute(Wtf.Q[self._db.lower()]['add'], params)

            # commit
            conn.commit()

            # clean up
            c.close()
            conn.close()
        except Exception, err:
            print >> sys.stderr, str(err)
            print >> sys.stdout, 'send %s: Sorry, adding the acronym failed...' % self._nick
        else:
            print >> sys.stdout, 'send %s: Successfully added...' % self._nick

    def _return_definition(self, acronym):
        # get the connection
        conn = self._get_database_connection()
        conn.row_factory = sqlite3.Row

        # start a cursor
        c = conn.cursor()

        # run the query
        params = (acronym.lower(), )
        c.execute(Wtf.Q[self._db.lower()]['lookup'], params)

        # grab the row
        row = c.fetchone()

        # TODO: update the last used

        # clean up
        c.close()
        conn.close()

        # output results
        if row != None:
            print >> sys.stdout, 'send %s: %s == %s' % (self._nick, row['acronym'], row['text'])
        else:
            print >> sys.stdout, 'send %s: Sorry, I don\'t know what %s means...' % acronym

    def main(self):

        # get the command and arguments
        c = re.match(r'(\S*)\s*(\S*)\s*(.*)', self._msg)
        cmd = c.group(1)

        if len(cmd) == 0:
            # find a random acronym
            self._return_random()
        elif cmd.startswith('--add'):
            # get the acronym and its definition
            acronym = c.group(2)
            definition = c.group(3)
            if (len(acronym) == 0) or (len(definition) == 0):
                print >> sys.stdout, 'send missing parameter'
                self._print_help(os.path.realpath(__file__))
                return 1

            # add it
            self._add_acronym(acronym, definition)
            
        else:
            # look up the acronym
            self._return_definition(cmd)

if __name__ == "__main__":
    cmd = Wtf()
    sys.exit(cmd.main())
