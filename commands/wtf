#!/usr/bin/env python

##HACKABOT_HELP##
# Get a random or specific acronym!
# !wtf [something] | --add <acronym> <what it stands for>
##HACKABOT_HELP##

import datetime
import os
import random
import re
import sys

from storm.expr import Asc,Desc

from command import Command
from models import WTFEntry

class Wtf(Command):

    def __init__(self):

        # call the base constructor to set up everything
        super(Wtf, self).__init__('wtf')

    def _return_random(self):

        # get the connection
        store = self._get_database_connection()

        # get a random WTF entry
        wtfs = store.find(WTFEntry)
        if wtfs.is_empty():
            print >> sys.stdout, 'send Sorry, there are no registered acronyms, try adding some...'
            return

        # TODO: take into account the last used somehow
        # select a random wtf
        max = wtfs.count() - 1
        wtf = wtfs[random.randint(0, max)]

        # update the last used time
        wtf.lastused = int(datetime.datetime.now().strftime("%y%m%d%H%M"))

        # flush and commit
        store.flush()
        store.commit()

        # return the wtf
        print >> sys.stdout, 'send %s: Your random acronym is: %s == %s' % (self._nick, wtf.acronym, wtf.text)

    def _add_acronym(self, acronym, definition):

        # get the connection
        store = self._get_database_connection()

        # figure out the channel to record
        chan = ''
        if self._event_type.lower() == 'pubmsg':
            chan = self._to

        # create the new entry
        wtf = WTFEntry(acronym, definition, self._nick, chan)

        # add it
        store.add(wtf)

        # flush and commit
        store.flush()
        store.commit()

        print >> sys.stdout, 'send %s: Successfully added...' % self._nick

    def _return_definition(self, acronym):

        # get the connection
        store = self._get_database_connection()

        # look up the acronym
        wtf = store.find(WTFEntry, WTFEntry.acronym_i == unicode(acronym.lower())).one()

        # output results
        if wtf is None:
            print >> sys.stdout, 'send %s: Sorry, I don\'t know what %s means...' % (self._nick, acronym)
        else:
            # update the last used
            wtf.lastused = int(datetime.datetime.now().strftime("%y%m%d%H%M"))

            # output the acronym definition
            print >> sys.stdout, 'send %s: %s == %s' % (self._nick, wtf.acronym, wtf.text)

    def main(self):

        # get the command and arguments
        c = re.match(r'(\S*)\s*(\S*)\s*(.*)', self._msg)
        cmd = c.group(1)

        if len(cmd) == 0:
            # find a random acronym
            self._return_random()
        elif cmd.startswith('--add'):
            # get the acronym and its definition
            acronym = c.group(2)
            definition = c.group(3)
            if (len(acronym) == 0) or (len(definition) == 0):
                print >> sys.stdout, 'send missing parameter'
                self._print_help(os.path.realpath(__file__))
                return 1

            # add it
            self._add_acronym(acronym, definition)
            
        else:
            # look up the acronym
            self._return_definition(cmd)

if __name__ == "__main__":
    cmd = Wtf()
    sys.exit(cmd.main())
