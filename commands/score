#!/usr/bin/env python

##HACKABOT_HELP##
# Print scores from something++ and something-- statements
# --low shows the bottom 5 scores, --high shows the top 5
# !score [ somenick | something | --low | --high ]
##HACKABOT_HELP##

import sys
import os

from storm.expr import Asc,Desc

from command import Command
from control import ChannelNames
from models import ScoreEntry

class Score(Command):

    def __init__(self):

        # call the base constructor to set up everything
        super(Score, self).__init__('score')

    def _return_score(self, name):

        # get the db connection
        store = self._get_database_connection()

        # try to look up the score
        s = store.find(ScoreEntry, ScoreEntry.name == unicode(name)).one()

        if s is None:
            print >> sys.stdout, "send I don't have a score for %s" % name
            return

        if s.value == 1:
            print >> sys.stdout, 'send %s has scored %s point!' % (s.name, s.value)
        else:
            print >> sys.stdout, 'send %s has scored %s points!' % (s.name, s.value)

    def _return_list(self, order):

        # get the db connection
        store = self._get_database_connection()

        # set the ordering
        scores = store.find(ScoreEntry)
        if order == 'low':
            scores.order_by(Asc(ScoreEntry.value))
        else:
            scores.order_by(Desc(ScoreEntry.value))

        # check for no scores in the db
        if scores.is_empty():
            print >> sys.stdout, 'There are no scores!'
            return

        # figure out how total number of scores
        max = 5
        if scores.count() < 5:
            max = scores.count()

        # print the top 5/bottom 5 list
        print >> sys.stdout, 'sendnext'
        if order == 'low':
            print >> sys.stdout, 'Losers:'
        else:
            print >> sys.stdout, 'Top %s:' % max
        for i in range(0,max):
            print >> sys.stdout, '  %s %s' % (scores[i].name, scores[i].value)

    def main(self):

        parts = self._msg.split()
        order = None
        name = None
        chan = None
        error = False
        for part in parts:
            if part.startswith('-'):
                if part.startswith('-h') or part.startswith('--high'):
                    if order is None:
                        order = 'high'
                    else:
                        error = True
                elif part.startswith('-l') or part.startswith('--low'):
                    if order is None:
                        order = 'low'
                    else:
                        error = True
            else:
                if name == None and order == None:
                    # if they specified a name and nothing else, we'll look that one up
                    name = part
                else:
                    error = True

        if error:
            self._print_help(os.path.realpath(__file__))
            return None

        if name:
            self._log.debug('looking up score for %s' % name)
            self._return_score(name)
            return None

        self._return_list(order)

if __name__ == "__main__":
    cmd = Score()
    sys.exit(cmd.main())
